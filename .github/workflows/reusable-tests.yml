# üîÑ REUSABLE WORKFLOW: This workflow can be called by other workflows
# Think of it as a function that other workflows can "import" and use

name: Reusable Test Workflow

# üéØ TRIGGER: This workflow is NOT triggered directly by push/PR
# Instead, it's triggered when another workflow calls it
on:
  workflow_call:
    # üì• INPUTS: These are parameters that the calling workflow must provide
    inputs:
      python-version:
        description: "Python version to use for testing"
        required: true
        type: string
      os:
        description: "Operating system to run tests on"
        required: true
        type: string

    # üì§ OUTPUTS: These can be used by the calling workflow
    outputs:
      test-result:
        description: "Test execution result (passed/failed)"
        value: ${{ jobs.test.outputs.result }}

jobs:
  test:
    # üñ•Ô∏è Run on the OS provided by the caller
    runs-on: ${{ inputs.os }}

    # üì§ Define outputs for this job
    outputs:
      result: ${{ steps.test-execution.outcome }}

    steps:
      # Step 1: Download the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python with the version provided by the caller
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      # Step 3: Cache dependencies (speeds up repeated runs)
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Run linting with flake8
      - name: Lint with flake8
        run: |
          # Check for syntax errors and undefined names (fails the build)
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Check for style issues (warns but doesn't fail)
          flake8 . --count --exit-zero --max-line-length=88 --statistics

      # Step 6: Check code formatting with black
      - name: Check formatting with black
        run: |
          black --check .

      # Step 7: Run tests with coverage
      # The 'id' lets us reference this step's outcome later
      - name: Run tests
        id: test-execution
        run: |
          pytest --cov=main --cov-report=term-missing --cov-report=xml

      # Step 8: Generate a test report (HTML format)
      - name: Generate HTML coverage report
        if: always() # Run even if previous steps failed
        run: |
          pip install coverage
          coverage html

      # Step 9: Upload the test report as an artifact
      # This lets you download the report from the GitHub Actions UI
      - name: Upload test report
        if: always() # Always upload, even if tests failed
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ inputs.os }}-py${{ inputs.python-version }}
          path: htmlcov/
          retention-days: 7 # Keep the report for 7 days

      # Step 10: Upload coverage data
      - name: Upload coverage to artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ inputs.os }}-py${{ inputs.python-version }}
          path: coverage.xml
          retention-days: 7
