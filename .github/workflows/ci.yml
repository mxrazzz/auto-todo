# 🧩 This is your GitHub Actions workflow file
# Every workflow file must live inside .github/workflows/
# The file extension is always .yml or .yaml (both work the same)

name: Python CI with Pytest # 🏷️ This is just a name for the workflow (shows up in GitHub Actions tab)

on: # ⚙️ This defines WHEN the workflow runs
  push: # 🚀 Runs every time you push new code
    branches: [main] # 🧠 You can change this to any branch (e.g. 'dev')
  pull_request: # 👀 Runs when someone opens or updates a pull request
    branches: [main]

jobs: # 🧱 A workflow is made up of one or more jobs
  build: # 🧰 We'll call this job "build"
    runs-on: ubuntu-latest # 💻 This tells GitHub what OS to use in the cloud (Ubuntu VM)
    # 🧠 Add permissions for the job to write back to the repository (needed to commit the badge)
    permissions:
      contents: write

    steps: # 📜 A job has multiple 'steps'
      # 🚀 OPTIMIZATION 1: FASTER CODE DOWNLOAD
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # � This tells the action to only download the latest version of your code, not the whole history.

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # 🚀 OPTIMIZATION 2: CACHING DEPENDENCIES
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          # This is the path where pip stores its cache on the runner.
          path: ~/.cache/pip
          # This is the unique "key" for the cache.
          # 'runner.os' includes the OS in the key (e.g., 'Linux').
          # 'hashFiles' creates a unique hash from your requirements.txt file.
          # If requirements.txt changes, the key changes, and a new cache is created.
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          # This tells the cache action to restore the cache even if the key doesn't have an exact match.
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        # 🧠 If the cache was restored, this step will be much faster because it will find the packages already installed.

      - name: Run tests with coverage
        run: |
          # --cov=main: Tells pytest-cov to measure coverage for the 'main.py' file.
          # The tj-actions/coverage-badge-py action will read the coverage output automatically.
          pytest --cov=main

      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-py@v2
        with:
          # The output path for the badge SVG file
          output: coverage.svg

      - name: Commit and push coverage badge
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update coverage badge"
          file_pattern: coverage.svg
